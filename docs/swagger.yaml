openapi: 3.0.0
info:
  title: Book Management API
  description: API for managing books in a bookstore system
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local server
paths:
  /books:
    get:
      summary: Get all books
      description: Get a list of all books
      tags:
        - books
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      summary: Create a new book
      description: Add a new book to the collection
      tags:
        - books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "201":
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Bad request
        "409":
          description: Book already exists
        "500":
          description: Internal server error
  /books/{id}:
    get:
      summary: Get a book by ID
      description: Get a single book by its ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "404":
          description: Book not found
    put:
      summary: Update a book
      description: Update book details by ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
      responses:
        "200":
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Bad request
        "500":
          description: Internal server error
    delete:
      summary: Delete a book
      description: Remove a book from the collection by ID
      tags:
        - books
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Book not found
        "500":
          description: Internal server error

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "The Go Programming Language"
        author:
          type: string
          example: "Alan A. A. Donovan"
        year:
          type: integer
          example: 2015
